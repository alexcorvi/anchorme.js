import anchorme from "../../dist/node/index";
import * as expect from "expect";

const snapshots:{[key: string]: {input: string, snapshot: string[]}} = {
	// first snapshot used in this project
	firstSnapshot: {
		input: `Library works with (http://www.google.com) or without (www.google.com) protocols in link. It works well on paths [www.github.io/something/something] and queries <wordpress.com/post.php?p=112> and even when query starts immediately after the TLDS "wordpress.com?p=112". This library does validation against a full IANA list, so for example this link will be detected: 'alex.photography', yet this one will not 'alex.photograph'. Some links might also have ports in them like this one (https://a.co:8999/ab.php?p=12). Some are actually an IP (127.0.0.1/should_(be)_detected, invalid:127.0.0.300/should/not(be)_detected). Local machine names URLs are detected only when preceded by a protocol (https://localhost/abc, ftps://hostname, http://local:123?abc=xyz.)
		Links with non-english alphabets are considered as non-valid, yet they are commonly used in chat application and so, so we supported them (to some degree). (examples: ka.wikipedia.org/wiki/მთავარი_გვერდი, ka.wikipedia.org/wiki/ბაქო, ka.wikipedia.org/wiki/2_აპრილი, ka.wikipedia.org/wiki/მერი_(სპილო)). Encoded links works too (example:ka.wikipedia.org/wiki/%E1%83%91, mailto:mail@xn--ngbrx4e.com).
		Emails are detected too: (valid: email@ex.com e.mail@ex.com e-mail@ex.com e+mail@ex.com e_mail@example.com 123@ex.com 123.123@ex.com email@sub.domain.com email@ex.co.jp  email@123.123.123.123) (invalid email.@example.web email@example email@example.abcd email@111.222.333.444).
		Files (when starting with file:/// protocol) are detected too. (file:///c:/somefile.zip).
		Tokenization is as accurate as it can get, you can see from the above text that we've tried almost all common punctuation marks and the library detected links from between them.
		Library doesn't break your HTML, so an HTML attribute that has a link in it will not be broken <img src='http://dummyimage.com/30'> or a link that is already inside an attribute, will not be broken (e.g. <a href="https://github.io">https://github.io</a>).`,
		snapshot: ["http://www.google.com","www.google.com","www.github.io/something/something","wordpress.com/post.php?p=112","wordpress.com?p=112","alex.photography","https://a.co:8999/ab.php?p=12","127.0.0.1/should_(be)_detected","https://localhost/abc","ftps://hostname","http://local:123?abc=xyz","ka.wikipedia.org/wiki/მთავარი_გვერდი","ka.wikipedia.org/wiki/ბაქო","ka.wikipedia.org/wiki/2_აპრილი","ka.wikipedia.org/wiki/მერი_(სპილო)","ka.wikipedia.org/wiki/%E1%83%91","mailto:mail@xn--ngbrx4e.com","email@ex.com","e.mail@ex.com","e-mail@ex.com","e+mail@ex.com","e_mail@example.com","123@ex.com","123.123@ex.com","email@sub.domain.com","email@ex.co.jp","email@123.123.123.123","file:///c:/somefile.zip"]
	},
	// snapshot on dev 31/3/2023
	snapshot31_03_23: {
		input: `regular link http://sub.domain.co.uk:3000/p/a/t/h_(asd)/h?q=abc123#dfdf	followed by a dot with some pollution: (www.github.com., github.com., mail@gmail.com.,)	few other examples	few.sub.domains.github.com	http://www.github.com:4312/path	complex pollution[(https://a.co:8999/ab.php?p=12, http://a.b.com/რ_(რ)/)].	no forward slash wordpress.com?p=112	IPV6 ftps://[2a00:1450:4025:401::67]/a.ph(p)/a.php#ewe	complex with port http://sub.domain.co.uk:3000/p/a/t/h_(asd)/h?q=abc123#dfdf	port: http://sub.domain.co.uk:3000/p/?q=abc123#dfdf	valid because of protocol http://www.عربي.com http://localhost http://localhost/123.file http://local:123?abc=xyz	file file:///da////sdaas/sda	other examples:	ftp://local.com/sds	http://localhost/dsadsa.csharp	http://17.0.0.1:3000/p/t_(d)/h?q=a3#f	https://127.0.0.1/org/kk	http://[2a00:1450:4025:401::67]/so/pa/here////	http://[2a00:1450:4025:401::67]/k/song	https://localhost/abc	gub.yt.p.l.e.e.e.e.e.oio.com	face.google.com	http://example.com/ABC-	http://localmachine	example.net	http://www.github.com	exam.ple.xn--wqeqweqweqw	ftps://example.neeeeeeet	https://google.flam	127.0.0.118	google.com:5070	google.com/org/kk.php	ka.wikipedia.org/მთავარი_გვერდი?abc=12#bangii	wordpress.com/post.php?p=112	a.co/p#12we	a.co	email@example.abcd 	http://www.google.com/ui	www.googl1e.caom	www.github.io/something/something#e	wordpress.com/post.php?p=112	wordpress.com?p=112#bang	alessx.photography	alessx.photograph	https://a.cos:8999/ab.php?p=12	google.com/should_(be)_detected	127.0.0.300/should/not(be)_detected)	ftps://hostname	domain.vu/1234#bang	ka.wiki.pedia.org/wiki/მთავარი_გვერდი	ka.wikipedia.org/wiki/ბაქო	ka.wikipedia.org/wiki/2_აპრილი	ka.wikipedia.org/wiki/მერი_(სპილო)).	'file:///some/file/path/filename.pdf',	'mailto:e+_mail.me@sub.domain.com',	'http://sub.domain.co.uk:3000/p/a/t/h_(asd)/h?q=abc123#dfdf',	'http://www.عربي.cum/something',	'a.org/abc/ი_გგ.php', 	ka.wikipedia.org/wiki/%E1%83%91	mailto:mail@xn--ngbrx4e.com	a.go.com.	go.com.	go.com.	google.com/something.	b.cd.	a@b.cd.	mailto:a@b.cd.	http://www.abc.go.com.	email@123.123.123.123	email@111.222.333.444	http://a.org/abcdada/dasdas/dasd/asd/asd/a	'mailto:e+_mail.me@sub.domain.com.',	[abc(jjj).,] abc_(abc) foo/bar- foo/bar////////=	[ka.wikipedia.org/wiki/yyyyiuo_(sada)////]	http://www.usinginvalidtld.inher	urls: (abc.com/a, gmail.com/a)	google.com/something/abc_(acv).	www.google.com/mail.	ka.wikipedia.org/wiki/მთავარი_გვერდი?abc=12#bang///	wordpress.com/post.php?p=112	http://www.google.com/ss	www.fas.com	gogle.com	ali@gmail.com.`,
		snapshot: ["http://sub.domain.co.uk:3000/p/a/t/h_(asd)/h?q=abc123#dfdf","www.github.com","github.com","mail@gmail.com","few.sub.domains.github.com","http://www.github.com:4312/path","https://a.co:8999/ab.php?p=12","http://a.b.com/რ_(რ)/","wordpress.com?p=112","ftps://[2a00:1450:4025:401::67]/a.ph(p)/a.php#ewe","http://sub.domain.co.uk:3000/p/a/t/h_(asd)/h?q=abc123#dfdf","http://sub.domain.co.uk:3000/p/?q=abc123#dfdf","http://www.عربي.com","http://localhost","http://localhost/123.file","http://local:123?abc=xyz","file:///da////sdaas/sda","ftp://local.com/sds","http://localhost/dsadsa.csharp","http://17.0.0.1:3000/p/t_(d)/h?q=a3#f","https://127.0.0.1/org/kk","http://[2a00:1450:4025:401::67]/so/pa/here////","http://[2a00:1450:4025:401::67]/k/song","https://localhost/abc","gub.yt.p.l.e.e.e.e.e.oio.com","face.google.com","http://example.com/ABC-","http://localmachine","example.net","http://www.github.com","ftps://example.neeeeeeet","https://google.flam","127.0.0.118","google.com:5070","google.com/org/kk.php","ka.wikipedia.org/მთავარი_გვერდი?abc=12#bangii","wordpress.com/post.php?p=112","a.co/p#12we","a.co","http://www.google.com/ui","www.github.io/something/something#e","wordpress.com/post.php?p=112","wordpress.com?p=112#bang","alessx.photography","https://a.cos:8999/ab.php?p=12","google.com/should_(be)_detected","ftps://hostname","domain.vu/1234#bang","ka.wiki.pedia.org/wiki/მთავარი_გვერდი","ka.wikipedia.org/wiki/ბაქო","ka.wikipedia.org/wiki/2_აპრილი","ka.wikipedia.org/wiki/მერი_(სპილო)","file:///some/file/path/filename.pdf","mailto:e+_mail.me@sub.domain.com","http://sub.domain.co.uk:3000/p/a/t/h_(asd)/h?q=abc123#dfdf","http://www.عربي.cum/something","a.org/abc/ი_გგ.php","ka.wikipedia.org/wiki/%E1%83%91","mailto:mail@xn--ngbrx4e.com","a.go.com","go.com","go.com","google.com/something","b.cd","a@b.cd","mailto:a@b.cd","http://www.abc.go.com","email@123.123.123.123","http://a.org/abcdada/dasdas/dasd/asd/asd/a","mailto:e+_mail.me@sub.domain.com","ka.wikipedia.org/wiki/yyyyiuo_(sada)////","http://www.usinginvalidtld.inher","abc.com/a","gmail.com/a","google.com/something/abc_(acv)","www.google.com/mail","ka.wikipedia.org/wiki/მთავარი_გვერდი?abc=12#bang///","wordpress.com/post.php?p=112","http://www.google.com/ss","www.fas.com","gogle.com","ali@gmail.com"]
	},
};

describe("Snapshot testing", () => {
	Object.keys(snapshots).forEach(snapshotName=>{
		describe(`testing snapshot ${snapshotName}`, ()=>{
			const matchedAll = anchorme.list(snapshots[snapshotName].input);
			for (let index = 0; index < matchedAll.length; index++) {
				const MatchedSingle = matchedAll[index];
				it(MatchedSingle.string, ()=>{
					expect(MatchedSingle.string).toBe(snapshots[snapshotName].snapshot[index]);
				});
				if(MatchedSingle.string !== snapshots[snapshotName].snapshot[index]) {
					break;
				}
			}
		});
	});
});